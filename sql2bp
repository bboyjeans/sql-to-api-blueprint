#!/usr/bin/env node

var fs = require('fs');
var colors = require('colors');
var program = require('commander');
var sqljs = require('sqljs');
var handlebars = require('handlebars');
var inflection = require('inflection');
var _ = require('lodash');

var Entity = require('./classes/entity.js');


program
  .version('0.0.1')
  .option('-i, --input [input sql path]', 'Specify input SQL file')
  .option('-m, --mixin [JSON AST mixin path]', 'JSON file to mixin to AST')
  .option('-o, --output [output blueprint path]', 'Specify output Blueprint API file')
  .parse(process.argv);

var app = {

	init: function() {
		var sqlString = this.getSQLString();
		var entities = this.getEntitiesFromSQL(sqlString);

		this.generate(entities);
	},

	getSQLString: function() {
		var sql = fs.readFileSync(program.input).toString();

		//set params are feaking out sqljs? - remove
		sql = sql.replace(/SET(.*?);/gmi, '');

		//BITs are freaking out sqljs? - remove
		sql = sql.replace(new RegExp("BIT", "g"), 'TINYINT');

		//NOTE - this was freaking some SQL out
		//remove dates and datetimes...
		//sql = sql.replace(new RegExp("DATETIME", "g"), 'INT');
		//sql = sql.replace(new RegExp("DATE", "g"), 'INT');

		return sql;
	},

	getEntitiesFromSQL: function(sql) {
		var entities = [];
		var sqlParseOptions = new sqljs.ParseOptions();
		var statements = sqljs.parse(sql, undefined, sqlParseOptions);
		console.log('[Found] '.green, statements.length + ' CREATE TABLE statements');

		//build entities collection
		statements.forEach(function(statement){
			if(statement.statement === 'CREATE' && statement.what === 'TABLE') {

				var fields = [];
				statement.definitions.forEach(function(definition){
					if(definition.name) {
						fields.push({
							name: definition.name,
							type: definition.type,
							notNull: definition.notNull,
						});
					}
				});

				var entity = new Entity(statement.table, fields);
				entities.push(entity);
			}
		});

		return entities;
	},

	//then https://github.com/apiaryio/matter_compiler
	createAST: function(entities) {
		var ast = {
			_version: '2.0',
			metadata: [
				{
					name: 'FORMAT',
					value: '1A'
				}
			],
			name: 'My API',
			description: 'Description of *My API*.\n\n',
			resourceGroups: []
		};

		var groups = [];

		entities.forEach(function(entity){
			groups.push(entity.getResourceGroup());
		});

		ast.resourceGroups = groups;


		//if we have a mixin
		if(program.mixin) {
			var mixin_str = fs.readFileSync(program.mixin).toString();
			if(mixin_str) {
				var mixin = JSON.parse(mixin_str);
				ast = _.merge(ast, mixin,  function(a, b) {
					if(typeof a === "string" && typeof b === "string" && b.indexOf('{{original}}') > -1) {
						b = b.replace('{{original}}', a);
						return b;
					}

					return undefined;
				});
			}
		}

		fs.writeFile((program.output + '.json'), JSON.stringify(ast, null, 4));
	},

	runMatterCompiler: function() {
		var exec = require("child_process").exec;

		exec(('matter_compiler ' + program.output + '.json > ' + program.output), function (err, stdout, stderr) {
			console.log("[Done]".green);
		});
	},

	generate: function(entities) {
		this.createAST(entities);
		this.runMatterCompiler();
	}
};

//kickoff
app.init();